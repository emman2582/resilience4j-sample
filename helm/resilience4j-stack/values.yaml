# Default values for resilience4j-stack
global:
  imageRegistry: ""
  imagePullSecrets: []

# Service A Configuration
serviceA:
  enabled: true
  name: service-a
  image:
    repository: r4j-sample-service-a
    tag: "0.1.0"
    pullPolicy: Never
  replicaCount: 1
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  livenessProbe:
    httpGet:
      path: /actuator/health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /actuator/health
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
  env:
    B_URL: "http://service-b:8081"

# Service B Configuration
serviceB:
  enabled: true
  name: service-b
  image:
    repository: r4j-sample-service-b
    tag: "0.1.0"
    pullPolicy: Never
  replicaCount: 1
  service:
    type: ClusterIP
    port: 8081
    targetPort: 8081
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  livenessProbe:
    httpGet:
      path: /actuator/health
      port: 8081
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /actuator/health
      port: 8081
    initialDelaySeconds: 5
    periodSeconds: 5

# Prometheus Configuration
prometheus:
  enabled: true
  name: prometheus
  image:
    repository: prom/prometheus
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 9090
    targetPort: 9090
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "200m"
  config:
    scrapeInterval: 15s
    evaluationInterval: 15s

# Grafana Configuration
grafana:
  enabled: true
  name: grafana
  image:
    repository: grafana/grafana
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  adminUser: admin
  adminPassword: admin

# OpenTelemetry Collector Configuration
otelCollector:
  enabled: true
  name: otel-collector
  image:
    repository: otel/opentelemetry-collector-contrib
    tag: "latest"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    ports:
      otlpHttp: 4318
      prometheusMetrics: 9464
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"

# Ingress Configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: resilience4j.local
      paths:
        - path: /
          pathType: Prefix
          service: service-a
  tls: []

# Autoscaling Configuration
autoscaling:
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  vpa:
    enabled: false
    updateMode: "Auto"
    minAllowed:
      cpu: 100m
      memory: 128Mi
    maxAllowed:
      cpu: 2000m
      memory: 2Gi

# ServiceMonitor for Prometheus Operator
serviceMonitor:
  enabled: false
  namespace: monitoring
  interval: 30s
  scrapeTimeout: 10s