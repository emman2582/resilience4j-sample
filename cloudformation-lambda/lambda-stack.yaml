AWSTemplateFormatVersion: '2010-09-09'
Description: 'Resilience4j Lambda Functions with API Gateway'

Parameters:
  ServiceAImageUri:
    Type: String
    Description: ECR URI for Service A container image
  
  ServiceBImageUri:
    Type: String
    Description: ECR URI for Service B container image

Resources:
  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt CircuitBreakerTable.Arn

  # DynamoDB table for circuit breaker state
  CircuitBreakerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: resilience4j-circuit-breaker-state
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: circuitName
          AttributeType: S
      KeySchema:
        - AttributeName: circuitName
          KeyType: HASH

  # Service A Lambda Function
  ServiceAFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: service-a
      PackageType: Image
      Code:
        ImageUri: !Ref ServiceAImageUri
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 1024
      Environment:
        Variables:
          SERVICE_B_URL: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/service-b'
          DYNAMODB_TABLE: !Ref CircuitBreakerTable
      TracingConfig:
        Mode: Active

  # Service B Lambda Function
  ServiceBFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: service-b
      PackageType: Image
      Code:
        ImageUri: !Ref ServiceBImageUri
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      TracingConfig:
        Mode: Active

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: resilience4j-lambda-api
      Description: API Gateway for Resilience4j Lambda functions

  # Service A Resource (root proxy)
  ServiceAProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: '{proxy+}'

  # Service A Method
  ServiceAProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ServiceAProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServiceAFunction.Arn}/invocations'

  # Service B Resource
  ServiceBResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'service-b'

  ServiceBProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref ServiceBResource
      PathPart: '{proxy+}'

  ServiceBProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ServiceBProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServiceBFunction.Arn}/invocations'

  # Lambda permissions
  ServiceAInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ServiceAFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  ServiceBInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ServiceBFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # API Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ServiceAProxyMethod
      - ServiceBProxyMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

Outputs:
  ApiGatewayUrl:
    Description: API Gateway URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'